        -:    0:Source:uuid_v1_ops.h
        -:    0:Graph:uuid_v1_ops.gcno
        -:    0:Data:uuid_v1_ops.gcda
        -:    0:Runs:2
        -:    1:#ifndef UUID_V1_OPS_H
        -:    2:#define UUID_V1_OPS_H
        -:    3:
        -:    4:#include "postgres.h"
        -:    5:#include "nodes/print.h"
        -:    6:#include "utils/builtins.h"
        -:    7:#include "utils/sortsupport.h"
        -:    8:#include "utils/uuid.h"
        -:    9:#include "utils/inet.h"
        -:   10:#include "utils/timestamp.h"
        -:   11:
        -:   12:#define UUID_V1_100NS_TO_USEC INT64CONST(10)
        -:   13:#define UUID_V1_TIMESTAMP_LEN 8
        -:   14:#define GREGORIAN_BEGINNING_OFFSET_USEC INT64CONST(13165977600000000)
        -:   15:#define UUID_VERSION_OFFSET 6
        -:   16:
        -:   17:#define UUID_V1_GREATEST_SUPPORTED_TIMESTAMP INT64CONST(909171226085477580)
        -:   18:#define UUID_V1_GREATEST_SUPPORTED_INT8 INT64CONST(0xf000000000000000)
        -:   19:#define UUID_V1_LEAST_SUPPORTED_TIMESTAMP -GREGORIAN_BEGINNING_OFFSET_USEC
        -:   20:
        -:   21:#define UUID_V1_NODE_OFFSET_A 10
        -:   22:#define UUID_V1_NODE_OFFSET_B 11
        -:   23:#define UUID_V1_NODE_OFFSET_C 12
        -:   24:#define UUID_V1_NODE_OFFSET_D 13
        -:   25:#define UUID_V1_NODE_OFFSET_E 14
        -:   26:#define UUID_V1_NODE_OFFSET_F 15
        -:   27:
        -:   28:#define UUID_V1_SEQ_OFFSET 8
        -:   29:
        2:   30:PG_MODULE_MAGIC;
        -:   31:
        4:   32:PG_FUNCTION_INFO_V1(is_uuid_v1);
        -:   33:Datum		is_uuid_v1(PG_FUNCTION_ARGS);
        -:   34:
        4:   35:PG_FUNCTION_INFO_V1(uuid_v1_cmp);
        -:   36:Datum		uuid_v1_cmp(PG_FUNCTION_ARGS);
        -:   37:
        4:   38:PG_FUNCTION_INFO_V1(uuid_v1_get_timestamptz);
        -:   39:Datum		uuid_v1_get_timestamptz(PG_FUNCTION_ARGS);
        -:   40:
        4:   41:PG_FUNCTION_INFO_V1(uuid_v1_get_timestamp_as_int8);
        -:   42:Datum		uuid_v1_get_timestamp_as_int8(PG_FUNCTION_ARGS);
        -:   43:
        4:   44:PG_FUNCTION_INFO_V1(uuid_v1_lt);
        -:   45:Datum		uuid_v1_lt(PG_FUNCTION_ARGS);
        -:   46:
        4:   47:PG_FUNCTION_INFO_V1(uuid_v1_le);
        -:   48:Datum		uuid_v1_le(PG_FUNCTION_ARGS);
        -:   49:
        4:   50:PG_FUNCTION_INFO_V1(uuid_v1_ge);
        -:   51:Datum		uuid_v1_ge(PG_FUNCTION_ARGS);
        -:   52:
        4:   53:PG_FUNCTION_INFO_V1(uuid_v1_gt);
        -:   54:Datum		uuid_v1_gt(PG_FUNCTION_ARGS);
        -:   55:
        4:   56:PG_FUNCTION_INFO_V1(uuid_v1_get_node_id);
        -:   57:Datum		uuid_v1_get_node_id(PG_FUNCTION_ARGS);
        -:   58:
        4:   59:PG_FUNCTION_INFO_V1(uuid_v1_get_clock_seq);
        -:   60:Datum		uuid_v1_get_clock_seq(PG_FUNCTION_ARGS);
        -:   61:
        4:   62:PG_FUNCTION_INFO_V1(uuid_v1_get_variant);
        -:   63:Datum		uuid_v1_get_variant(PG_FUNCTION_ARGS);
        -:   64:
        4:   65:PG_FUNCTION_INFO_V1(uuid_v1_create_from_ts);
        -:   66:Datum		uuid_v1_create_from_ts(PG_FUNCTION_ARGS);
        -:   67:
        4:   68:PG_FUNCTION_INFO_V1(uuid_v1_create_from_int8);
        -:   69:Datum		uuid_v1_create_from_int8(PG_FUNCTION_ARGS);
        -:   70:
        -:   71:pg_uuid_t       *uuid_v1_create_from_internal(int64 ts, int16 clock_seq, macaddr *node);
        -:   72:static int64    uuid_v1_get_timestamp_internal(pg_uuid_t *uuid);
        -:   73:static int      uuid_v1_internal_cmp(const pg_uuid_t *arg1, const pg_uuid_t *arg2);
        -:   74:
        -:   75:static unsigned int order[UUID_LEN] = {6, 7, 4, 5, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15};
        -:   76:
        -:   77:#endif							/* UUID_V1_OPS_H */
